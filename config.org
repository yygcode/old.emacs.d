#+TITLE: Emacs configuration
#+AUTHOR: yanyg
#+EMAIL: yygcode@gmail.com

* Introduction
*[[https://en.wikipedia.org/wiki/Emacs][Emacs]]* /ˈiːmæks/ is a family of text editors that are characterized by their
extensibility. [[https://www.gnu.org/software/emacs/][GNU Emacs]] is the most popular and portable emacs implementation.

*[[http://orgmode.org/][Org mode]]* is a [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Major-Modes.html][major mode]] of emacs. It is for keeping notes, capturing ideas,
maintaining TODO lists, planning projects, and authoring documents with a fast
and effective plain-text system. It's also for rich exporting, html publishing,
literal programming, and reproducible research, etc..

This configuration is organzied with org mode literal programming, used to
customize emacs deeply for engineers. The goal is to improve the productivity
and comfort.

This configuration is tested under GNU Emacs 26.0.90, the version details is:
=GNU Emacs 26.0.90 (build 3, x86_64-w64-mingw32) of 2017-10-14=.

You can download the configuration from GitHub freely:
#+BEGIN_SRC shell
~$ cd $HOME
~$ git clone https://github.com/yygcode/.emacs.d.git
#+END_SRC

See notes [[http://ycode.org/emacs.html]] for more details.

* Environment check and specialize
** Windows
- Check environment variables, warn if misconfigured: =HOME, PATH=
- Solve confliction between Emacs and Windows traditional key binds
- ref [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Microsoft-Windows.html#Microsoft-Windows][Manual for MS Windows]] and [[http://ycode.org/emacs.html#install-ms][Install for MS]] for details
- e.g.: =HOME=e:, PATH=f:/msys64/usr/bin;f:/msys64/mingw64/bin;%PATH%=
#+BEGIN_SRC emacs-lisp
  (defun y:w32-check-env()
    (interactive)
    (message "TODO: FIXME")
    (unless (getenv "HOME")
      (warn "w32: Please ensure set env 'HOME'"))
    )

  (defun y:w32-keybind()
    (interactive)
    ;; enable M-w for copy
    (w32-register-hot-key [M-w])
    ;;(setq w32-lwindow-modifier 'super)
    ;;(w32-register-hot-key [s-])
    ;;(w32-register-hot-key [A-tab])
    ;;(setq w32-pass-lwindow-to-system nil)
    (w32-register-hot-key [C-M-n]))

  (when (string-equal system-type "windows-nt")
    (progn
      (y:w32-check-env)
      (y:w32-keybind)))
#+END_SRC

** Linux
*** TODO Wait.

** Common
- Use C system-time
#+BEGIN_SRC emacs-lisp
  (setq system-time-locale "C")
#+END_SRC

* Net Proxy
- URIpackage
- I use lantern to reach googles/youtube.
- You can use Access_proxy to customize the variable.
- Set by environments HTTP_PROXY, HTTPS_PROXY, NO_PROXY
- ref to [[https://www.gnu.org/software/emacs/manual/html_mono/url.html][Manual URI]]
#+BEGIN_SRC emacs-lisp
  (when (getenv "HTTP_PROXY")
    (message "Proxy: http proxy is %s" (getenv "HTTP_PROXY")))
  ;;  (setq url-proxy-services '(("http" . "127.0.0.1:49529")
  ;;                             ("https" . "127.0.0.1:49529")
  ;;                             ("no_porxy" . "^\\(localhost\\|10.*\\|*.github.com\\|*.gitlab.com\\|*.baidu.com\\|*bing.com\\)")))
#+END_SRC

* Apperance
** ui
- disable startup screen
- customize scratch message
- start with fullscreen
- hide tool, menu, scroll bar
- disable ring
- load comfortable theme monikai
- show column and size in the mode line
- monokai-theme is beautiful and compatible for me
- enhance mode line under terminal
#+BEGIN_SRC emacs-lisp
  (setq-default
   ;; disable start screen
   inhibit-splash-screen t
   ;; customize scratch message
   initial-scratch-message (concat ";; Happy hacking "
				   (or user-login-name "<yanyg>")
				   " - Emacs loves you!\n\n"))

  ;; init fullscreen
  (when (display-graphic-p)
    (add-hook 'after-init-hook
	      (lambda()(interactive)
		(set-frame-parameter nil 'fullscreen 'fullboth))))

  ;; hide menu, tool, scroll for maximized usable screen
  (menu-bar-mode -1)
  (when (fboundp 'tool-bar-mode)
    (tool-bar-mode -1))
  (when (display-graphic-p)
    (scroll-bar-mode -1))

  ;; cursor
  (setq-default cursor-type 'bar)
  (blink-cursor-mode -1)

  ;; disable bell
  (setq visible-bell nil)
  (setq ring-bell-function 'ignore)

  ;; show column and size in the mode line
  (setq column-number-mode t)
  (column-number-mode t)
  (size-indication-mode t)

  ;; monokai theme
  (use-package monokai-theme
    :init
    (load-theme 'monokai t))

  ;; enhance terminal mode-line color
  (unless (display-graphic-p)
    (set-face-background 'mode-line "color-240"))

  ;; diminish
  (use-package diminish
    :config
    (progn
      (diminish 'abbrev-mode)
      (diminish 'eldoc-mode)))
#+END_SRC

*** TODO more ui customize work
    DEADLINE: <2017-07-07 Fri>
- 80 column ruler
  [[https://www.emacswiki.org/emacs/FillColumnIndicator][FillColumnIndicator]]
  [[https://www.emacswiki.org/emacs/ColumnMarker][ColumnMarker]]
  [[https://www.emacswiki.org/emacs/EightyColumnRule][EightyColumnRule]]

** font
- Windows default to Lucida Sans
- Set to Source Code Pro if available
- Use YaHei Light or YaHei for CJK fonts
  + If unset CJK fonts, Emacs runs very slow when the buffer has CJK characters
#+BEGIN_SRC emacs-lisp
  ;; fallback fonts
  (set-fontset-font "fontset-default" nil
		    (font-spec :name "Lucida Sans" :size 15))
  (when (find-font (font-spec :name "Source Code Pro" :size 15))
    (set-frame-font (font-spec :name "Source Code Pro" :size 15) nil t)
    (message "Setting font to Source Code Pro"))

  ;; MS YaHei for CJK
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font nil charset
		      (font-spec :family "Microsoft YaHei" :size 15)))
#+END_SRC

* Misc Behaviors
- no backup files, managed files with repo
- typed text replaces the selected region
- large file warning threshold set to 100MB
- default directory set to my work directory
- disable mouse
- highlights operation portions
- alias yes-no to y-n
- desktop for linux
#+BEGIN_SRC emacs-lisp
  (setq-default make-backup-files nil)

  ;; tab
  (setq-default tab-width 8)
  (setq-default indent-tabs-mode nil)
  (delete-selection-mode t)
  (global-set-key (kbd "RET") 'newline-and-indent)
  (setq
   kill-ring-max 500
   kill-whole-line t)

  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; unit is bytes
  (setq large-file-warning-threshold 100000000)
  (setq default-directory "~/")

  (use-package disable-mouse
    :init
    ;;(global-disable-mouse-mode)
    (dolist (hook '(prog-mode-hook text-mode-hook))
      (add-hook hook #'whitespace-mode))
    :diminish global-disable-mouse-mode)

  ;; windows too slow to open history files
  (when (string-equal system-type "gnu/linux")
    (desktop-save-mode 1))

  (setq confirm-kill-processes nil)

  ;; (use-package volatile-highlights
  ;;   :pin melpa
  ;;   :diminish volatile-highlights-mode
  ;;   :init
  ;;   (volatile-highlights-mode t))
#+END_SRC

- undo-tree
  + C-/ undo
  + C-? redo
  + C-x u open undo-tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :pin gnu
    :diminish undo-tree-mode
    :init
    (global-undo-tree-mode))
#+END_SRC

* Coding system
- See [[https://www.gnu.org/software/emacs/manual/html_node/emacs/International.html#International][Manual International]] and [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Non_002dASCII-Characters.html#Non_002dASCII-Characters][Non-ASCII Characters]] for more details
- Reset *default-process-coding-system* to local coding system for subprocess
  will parse failed. (e.g.: emms + mplayer)
#+BEGIN_SRC emacs-lisp
  ;; Always want to use UTF-8, unix eol.
  ;; But collaborations with subprocess require local coding system
  (prefer-coding-system 'utf-8-unix)
  (when (string-equal current-language-environment "Chinese-GBK")
    ;; Do not use utf-8-unix . chinese-gbk-dos for
    ;; the set will cause ggtags failure
    (setq default-process-coding-system '(utf-8 . chinese-gbk)))
#+END_SRC

* Helper routes
** quickly open files
#+BEGIN_SRC emacs-lisp
   (defun y:buffer-scratch()
     (interactive)
     (switch-to-buffer "*scratch*"))
   (global-set-key (kbd "C-c q s") 'y:buffer-scratch)

   (global-set-key (kbd "C-c e") 'eshell)
   (global-set-key (kbd "C-c w") 'eww)

   (defun y:open-file-config()
     (interactive)
     (find-file "~/.emacs.d/config.org"))
   (global-set-key (kbd "C-c q c") 'y:open-file-config)

  (defun y:find-books-directory()
     (interactive)
     (helm-find-files-1 "~/books/"))
   (global-set-key (kbd "C-c q b") 'y:find-books-directory)

   (defun y:find-file-org-directory()
     "Find-file default with org directory"
     (interactive)
     (counsel-find-file "~/org/"))
   (global-set-key (kbd "C-c q o") 'y:find-file-org-directory)

   (defun y:find-file-homepage-directory()
     "Find-file default with org directory"
     (interactive)
     (counsel-find-file "~/org/h/"))
   (global-set-key (kbd "C-c q h") 'y:find-file-homepage-directory)

   (defun y:open-file-imeeting()
     (interactive)
     (find-file "~/org/i/meeting.org"))
   (global-set-key (kbd "C-c q i") 'y:open-file-imeeting)

   (defun y:open-file-english-words()
     (interactive)
     (find-file "~/org/h/english-words.org"))
   (global-set-key (kbd "C-c q e") 'y:open-file-english-words)

   (defun y:open-file-favorite-sites()
     (interactive)
     (find-file "~/org/h/sites-map.org"))
   (global-set-key (kbd "C-c q w") 'y:open-file-favorite-sites)
#+END_SRC

* Org Mode
** Default behaviors, Directory and Key binding
- Homepage: [[http://orgmode.org/]]
#+BEGIN_SRC emacs-lisp
  (use-package org
    :diminish org
    :init
    (progn
      (setq org-support-shift-select t)
      (setq org-src-fontify-natively t))
    :config
    (progn
      (setq org-directory "~/org")
      (setq org-agenda-files (list org-directory
				   (concat org-directory "/i")
				   (concat org-directory "/p")))
      (setq org-default-notes-file (concat org-directory "/notes.org"))
      (setq system-time-locale "C"))
    :bind
    (("C-c o c" . org-capture)
     ("C-c o a" . org-agenda))
    :mode
    ("\\.org\\'" . org-mode))
#+END_SRC

** Bullets
- Homepage: [[https://github.com/sabof/org-bullets][GitHub Org Bullets]]
#+BEGIN_SRC emacs-lisp
  (when (find-font (font-spec :name "Source Code Pro" :size 15))
    (use-package org-bullets
      :init
      (add-hook 'org-mode-hook
		(lambda()(org-bullets-mode 1)))))
#+END_SRC

** Org literal programming(Source Code Block)
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ditaa . t)
     (dot . t)
     (C . t)))

  (defun y:org-confirm-babel-evaluate(lang body)
    (not (or (string= lang "ditaa")
	     (string= lang "dot"))))
  (setq org-confirm-babel-evaluate 'y:org-confirm-babel-evaluate)

  ;; enable image preview
  (defun y:display-inline-image()
    (condition-case nil (org-display-inline-images)
      (error nil)))
  (add-hook 'org-babel-after-execute-hook 'y:display-inline-image t)
#+END_SRC

** Font config for table alignment
#+BEGIN_SRC emacs-lisp
  (defun y:org-set-fontset-set()
    (when (find-font (font-spec :name "Source Code Pro" :size 15))
      (set-frame-font (font-spec :name "Source Code Pro" :size 15) nil nil))

    ;; MS YaHei for CJK
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font nil charset
			(font-spec :family "Microsoft YaHei" :size 18))))
  (add-hook 'org-mode-hook 'y:org-set-fontset-set)
#+END_SRC

** Export and Publish
#+BEGIN_SRC emacs-lisp
  (use-package htmlize)

  (defadvice org-html-paragraph (before org-html-paragraph-advice
					(paragraph contents info) activate)
    "Join consecutive Chinese lines into a single long line without
      unwanted space when exporting org-mode to html."
    (let* ((origin-contents (ad-get-arg 1))
	   (fix-regexp "[[:multibyte:]]")
	   (fixed-contents
	    (replace-regexp-in-string
	     (concat "\\(" fix-regexp "\\) *\n *\\(" fix-regexp "\\)")
	     "\\1\\2" origin-contents)))
      (ad-set-arg 1 fixed-contents)))

  (defun y:org-publish-setup()
    "Org publish setup"
    ;; http://orgmode.org/manual/Publishing-options.html
    ;;(setq org-export-with-sub-superscripts nil)
    (setq org-export-with-sub-superscripts '{})
    (setq org-export-with-timestamps nil)
    (setq org-export-author "yanyg")
    (setq org-export-with-creator nil)
    (setq org-export-with-date nil)
    (setq org-export-with-email t)
    (setq org-export-with-toc t)
    (setq org-export-with-section-numbers 't)
    (setq org-html-preamble nil)
    (setq org-html-postamble nil)
    (setq org-html-link-home "https://ycode.org")
    (when (file-exists-p "~/hp/css/site.css")
      (setq org-html-head
	    (concat
	     "<style type=\"text/css\">"
	     (with-temp-buffer
	       (insert-file "~/hp/css/site.css")
	       (buffer-string))
	     "</style>")))
    ;; see org-html-style-default
    (setq org-html-head-include-default-style nil)

    ;; see org-html-scripts
    ;; (setq org-html-head-include-scripts nil)
    (setq org-html-htmlize-output-type 'css)

    ;;
    (setq org-html-preamble-format '(("en" "<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">
  <colgroup>
  <col  class=\"org-left\" />
  <col  class=\"org-left\" />
  <col  class=\"org-left\" />
  <col  class=\"org-left\" />
  <col  class=\"org-left\" />
  </colgroup>

  <tbody><tr>
  <td class=\"org-left\"><a href=\"index.html\">Home</a></td>
  <td class=\"org-left\"><a href=\"https://github.com/yygcode\">Github</a></td>
  </tr></tbody></table>"))
	  )

    ;; http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html
    (setq org-publish-project-alist
	  '(("pages"
	     :base-directory "~/org/h/"
	     :publishing-directory "~/hp/"
	     :recursive nil
	     :with-author t
	     :with-date t
	     :with-email t
	     :html-head-include-default-style nil
	     :html-head "<link rel=\"shortcut icon\" href=\"http://ycode.org/css/favicon.ico\" />
      <link rel=\"stylesheet\" type=\"text/css\" href=\"css/site.css\" />"
	     :publishing-function org-html-publish-to-html
	     ;; :auto-sitemap 't
	     ;; :sitemap-filename "sitemap.org"
	     ;; :sitemap-title "Sitemap"
	     :with-toc 't)
	    ("blog"
	     :base-directory "~/hp/src/blogs/"
	     :publishing-directory "~/hp/blogs/"
	     :recursive nil
	     :html-head-include-default-style nil
	     :html-head "<link rel=\"shortcut icon\" href=\"http://ycode.org/css/favicon.ico\" />
      <link rel=\"stylesheet\" type=\"text/css\" href=\"../css/site.css\" />"
	     :publishing-function org-html-publish-to-html
	     :section-numbers 't
	     :with-toc 't)
	    ("site" :components ("pages" "blog"))))
    )

  (use-package ox-publish
    :pin org
    :ensure org-plus-contrib
    :init
    (y:org-publish-setup))

#+END_SRC

** Publish
* Documents view                                                        :pdf:
** pdf-tools
- github: [[https://github.com/politza/pdf-tools][pdf-tools-github]]
- git:
  ~$ git clone https://github.com/politza/pdf-tools.git
  ~$ make package-install
- emacs: package-list-packages, then select org, press i and x.
- C-<up> and C-<down> to scroll in another window
#+BEGIN_SRC emacs-lisp
  (defun y:scroll-other-window(&optional arg)
    "Scroll other window with arg multiply 10"
    (interactive "p")
    (setq lines (* arg 10))
    (with-selected-window (other-window-for-scrolling)
      (if (string-equal major-mode "pdf-view-mode")
	  (progn
	    ;;            (setq lines (or lines 1))
	    (let* ((count arg)
		   v)
	      (or (< 0 count) (setq count (- count)))
	      (dotimes (v count)
		(if (< lines 0)
		    (pdf-view-previous-line-or-previous-page 1)
		  (pdf-view-next-line-or-next-page 1)))))
	(message "lines %d" lines)
	(scroll-up-line lines))))

  (defun y:scroll-other-window-opposite(&optional lines)
    (interactive "p")
    (y:scroll-other-window (- lines)))

  (global-set-key (kbd "C-c C-n") 'y:scroll-other-window)
  (global-set-key (kbd "C-c C-p") 'y:scroll-other-window-opposite)

  (use-package pdf-tools
    :init
    (setq doc-view-continuous t)
    ;;(add-to-list 'org-file-apps
    ;;             '("\\.pdf\\'" . default))
    ;; Ensure turn off linum mode for known bugs(choke)
    (pdf-tools-install :no-query-p)
    (setq-default pdf-view-display-size 'fit-height)
    (setq pdf-view-midnight-colors '("#F8F8F2" . "#272822"))
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    (add-hook 'pdf-view-mode-hook '(lambda()
				     (setq display-line-numbers nil)
				     (pdf-view-midnight-minor-mode)
				     (pdf-view-fit-page-to-window)))
    :diminish pdf-view-mode
    :bind
    (("C-c n" . y:scroll-other-window)
     ("C-c p" . y:scroll-other-window-opposite)))

  ;; use pdf-view for org-links
  ;; (use-package org-pdfview
  ;;   :init
  ;;   (add-to-list 'org-file-apps
  ;;                '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link)))))
  ;;(add-to-list 'load-path '"~/.emacs.d/elpa/org-pdfview")
  ;;(require 'org-pdfview)
  ;;(add-to-list 'org-file-apps
  ;;             '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link))))
#+END_SRC
* Development Enviroments
** Common
*** auto complete
- Homepage: [[https://github.com/auto-complete/auto-complete][GitHub Auto-Complete]]
- EmacsWiki: [[https://www.emacswiki.org/emacs/AutoComplete][EmacsWiki Auto-Complete]]
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete-config
    :diminish auto-complete-mode
    :ensure auto-complete
    :init
    (ac-config-default))
#+END_SRC

*** cedet
- Homepage :: [[http://cedet.sourceforge.net/][Cedet SourceForge]]
- A Gentle introduction to CEDET ::
  [[http://alexott.net/en/writings/emacs-devenv/EmacsCedet.html]]
#+BEGIN_SRC emacs-lisp
  (defun y:ac-source-semantic()
    (add-to-list 'ac-sources 'y:ac-source-semantic))
  (add-hook 'c-mode-common-hook 'y:ac-source-semantic)
  (use-package cedet
    :init
    (global-ede-mode 1)
    (global-semantic-idle-scheduler-mode 1)
    (add-hook 'c-mode-hook 'semantic-default-c-setup)
    (add-hook 'c++-mode-hook 'semantic-default-c-setup)
    :config
    (require 'semantic)
    (require 'semantic/ia)
    (require 'semantic/bovine/gcc)
    (require 'semantic/analyze)
    (provide 'semantic-analyze)
    (provide 'semantic-ctxt)
    (provide 'semanticdb)
    (provide 'semanticdb-find)
    (provide 'semanticdb-mode)
    (provide 'semantic-load)
    (semantic-mode 1)
    (setq-mode-local c-mode semanticdb-find-default-throttle
		   '(project unloaded system recursive)))
#+END_SRC

*** TODO ecb
- Homepage: [[http://ecb.sourceforge.net/][Ecb Sourceforge]]
- Docs: [[http://ecb.sourceforge.net/docs/][Ecb Sourceforge Doc]]
- depends on semantic
- https://stackoverflow.com/questions/3134026/emacs-23-2-with-ecb-2-40-file-error-cannot-open-load-file-semantic-ctxt
#+BEGIN_SRC emacs-lisp
  ;; try latest version if exist
  (setq y:ecb '"~/.emacs.d/elpa/ecb-20171213")
  (when (file-exists-p y:ecb)
    (add-to-list 'load-path y:ecb))

  (use-package ecb)
  (use-package ecb-autoloads
    :ensure ecb)
#+END_SRC
*** highlight-symbol
- Homepage: [[https://github.com/nschum/highlight-symbol.el][GitHub]]
#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :diminish highlight-symbol-mode
    :init
    (add-hook 'prog-mode-hook #'highlight-symbol-mode)
    :config
    (setq highlight-symbol-idle-delay 0.8)
    :bind
    (([f8] . highlight-symbol-at-point)
     ([S-f8] . highlight-regexp)))
#+END_SRC

*** highlight surrounding parenthesis
#+BEGIN_SRC emacs-lisp
  (use-package highlight-parentheses
    :diminish highlight-parentheses-mode
    :init
    (add-hook 'prog-mode-hook 'highlight-parentheses-mode))
#+END_SRC

*** iedit
- Homepage: [[https://github.com/victorhge/iedit][Github Iedit]]
#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :bind
    (("C-;" . iedit-mode)))
#+END_SRC
*** line number
#+BEGIN_SRC emacs-lisp
  (setq-default display-line-numbers-width 4)
  (when (fboundp 'global-display-line-numbers-mode)
    (global-display-line-numbers-mode 1))

#+END_SRC

*** smartparens
- ref [[https://ebzzry.io/en/emacs-pairs/][emacs-pairs]], [[https://github.com/Fuco1/smartparens][smartparens github]], and [[https://github.com/Fuco1/smartparens/wiki][wiki]]
#+BEGIN_SRC emacs-lisp
  ;; Do not change smartparens to smartparens-config and change 'ensure t'
  ;; to 'ensure smartparens' for mode line could not hide smartparens-mode
  ;; and config section will not work
  (use-package smartparens
    :diminish smartparens-mode
    :ensure t
    :init
    (progn
      (show-smartparens-global-mode t)
      (smartparens-global-mode 1)
      (add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
      (setq sp-base-key-bindings 'paredit)
      (setq sp-autoskip-closing-pair 'always)
      (setq sp-hybrid-kill-entire-symbol nil)
      (sp-use-paredit-bindings)
      )
    :config
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (sp-local-pair 'lisp-interaction-mode "'" nil :actions nil))
#+END_SRC

*** yasnippet
- Homepage: [[https://github.com/AndreaCrotti/yasnippet-snippets/tree/master][GitHub Yasnippet]]
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode
    :init
    (yas-global-mode 1))
#+END_SRC

*** ggtags
#+BEGIN_SRC emacs-lisp
  (use-package ggtags
    :diminish ggtags-mode
    :init
    (add-hook 'c-mode-common-hook
	      (lambda()
		(when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
		  (ggtags-mode 1)))))
  (require 'ggtags)
  (define-key ggtags-mode-map (kbd "C-c g s") 'ggtags-find-other-symbol)
  (define-key ggtags-mode-map (kbd "C-c g h") 'ggtags-view-tag-history)
  (define-key ggtags-mode-map (kbd "C-c g r") 'ggtags-find-reference)
  (define-key ggtags-mode-map (kbd "C-c g f") 'ggtags-find-file)
  (define-key ggtags-mode-map (kbd "C-c g c") 'ggtags-create-tags)
  (define-key ggtags-mode-map (kbd "C-c g u") 'ggtags-update-tags)

  (define-key ggtags-mode-map (kbd "M-.") 'ggtags-find-tag-dwim)
  (define-key ggtags-mode-map (kbd "M-,") 'pop-tag-mark)
#+END_SRC

*** helm gtags
- I prefer to use ggtags, comment it.
#+BEGIN_SRC emacs-lisp
  ;; (use-package helm-gtags
  ;;   :diminish helm-gtags-mode
  ;;   :init
  ;;   (progn
  ;;     (setq helm-gtags-prefix-key "\C-cg"
  ;;           helm-gtags-ignore-case t)
  ;;     (add-hook 'c-mode-hook 'helm-gtags-mode)
  ;;     (add-hook 'c++-mode-hook 'helm-gtags-mode)
  ;;     (add-hook 'asm-mode-hook 'helm-gtags-mode)
  ;;     (add-hook 'java-mode-hook 'helm-gtags-mode)
  ;;     )
  ;;   :bind
  ;;   (("M-." . helm-gtags-dwim)
  ;;    ("M-," . helm-gtags-pop-stack)
  ;;    ("M-;" . helm-gtags-find-rtag)))
#+END_SRC

*** stickfunc
- HomePage: [[https://github.com/tuhdo/semantic-stickyfunc-enhance#features][GitHub StickFunc Enhance]]
#+BEGIN_SRC emacs-lisp
  (use-package stickyfunc-enhance
    :pin melpa
    :init
    (add-to-list 'semantic-default-submodes 'global-semantic-stickyfunc-mode)
    (semantic-mode 1))
#+END_SRC

** C/C++
*** auto complete C headers
- Homepage: [[https://github.com/mooz/auto-complete-c-headers][GitHub Auto-complete-C-headers]]
- include dir in mingw: =gcc -v -c x.c=
- include dir in linux/cygwin: =gcc -xc++ -E -v -=
#+BEGIN_SRC emacs-lisp
  (if (string= system-type "windows-nt")
    (setq y:ac-c-headers
	  '("F:/msys64/mingw64/lib/gcc/x86_64-w64-mingw32/7.2.0/include"
	    "F:/msys64/mingw64/include"
	    "F:/msys64/mingw64/lib/gcc/x86_64-w64-mingw32/7.2.0/include-fixed"
	    "F:/msys64/mingw64/x86_64-w64-mingw32/include"))
    (setq y:ac-c-headers nil))

  (defun y:ac-c-headers-init()
    (add-to-list 'ac-sources 'ac-source-c-headers)
    ;;(add-to-list 'achead:include-directories '"F:/msys64/mingw64/lib/gcc/x86_64-w64-mingw32/7.2.0/include")
    (setq achead:include-directories (append y:ac-c-headers
					     achead:include-directories))
    )

  (use-package auto-complete-c-headers
    :defer nil
    :init
    (require 'auto-complete-c-headers)
    (add-hook 'c-mode-hook 'y:ac-c-headers-init)
    (add-hook 'c++-mode-hook 'y:ac-c-headers-init))
#+END_SRC

*** style definition
- open source code (e.g. example.c)
- exec 'c-guess-no-install' 'c-guess-view'
#+BEGIN_SRC emacs-lisp
  (defconst y:c-style-common
    '((c-tab-always-indent . nil) ; manualy added
      (c-basic-offset . 8)     ; Guessed value
      (c-offsets-alist
       (block-close . 0)       ; Guessed value
       (brace-list-close . 0)  ; Guessed value
       (brace-list-entry . 0)  ; Guessed value
       (brace-list-intro . +)  ; Guessed value
       (class-close . 0)       ; Guessed value
       (defun-block-intro . +) ; Guessed value
       (defun-close . 0)       ; Guessed value
       (defun-open . 0)        ; Guessed value
       (else-clause . 0)       ; Guessed value
       (inclass . +)           ; Guessed value
       (statement . 0)         ; Guessed value
       (statement-block-intro . +) ; Guessed value
       (statement-cont . +)    ; Guessed value
       (substatement . +)      ; Guessed value
       (topmost-intro . 0)     ; Guessed value
       (access-label . -)
       (annotation-top-cont . 0)
       (annotation-var-cont . +)
       (arglist-close . c-lineup-close-paren)
       (arglist-cont c-lineup-gcc-asm-reg 0)
       (arglist-cont-nonempty . c-lineup-arglist)
       (arglist-intro . c-lineup-arglist-intro-after-paren)
       (block-open . 0)
       (brace-entry-open . 0)
       (brace-list-open . +)
       (c . c-lineup-C-comments)
       (case-label . 0)
       (catch-clause . 0)
       (class-open . 0)
       (comment-intro . c-lineup-comment)
       (composition-close . 0)
       (composition-open . 0)
       (cpp-define-intro c-lineup-cpp-define +)
       (cpp-macro . -1000)
       (cpp-macro-cont . +)
       (do-while-closure . 0)
       (extern-lang-close . 0)
       (extern-lang-open . 0)
       (friend . 0)
       (func-decl-cont . +)
       (incomposition . +)
       (inexpr-class . +)
       (inexpr-statement . +)
       (inextern-lang . +)
       (inher-cont . c-lineup-multi-inher)
       (inher-intro . +)
       (inlambda . c-lineup-inexpr-block)
       (inline-close . 0)
       (inline-open . 0)
       (inmodule . +)
       (innamespace . +)
       (knr-argdecl . 0)
       (knr-argdecl-intro . 5)
       (label . 0)
       (lambda-intro-cont . +)
       (member-init-cont . c-lineup-multi-inher)
       (member-init-intro . +)
       (module-close . 0)
       (module-open . 0)
       (namespace-close . 0)
       (namespace-open . 0)
       (objc-method-args-cont . c-lineup-ObjC-method-args)
       (objc-method-call-cont c-lineup-ObjC-method-call-colons c-lineup-ObjC-method-call +)
       (objc-method-intro .
			  [0])
       (statement-case-intro . +)
       (statement-case-open . +)
       (stream-op . c-lineup-streamop)
       (string . -1000)
       (substatement-label . 0)
       (substatement-open . +)
       (template-args-cont c-lineup-template-args +)
       (topmost-intro-cont first c-lineup-topmost-intro-cont c-lineup-gnu-DEFUN-intro-cont)))
    "y:c-common")
  (c-add-style "y:c-common" y:c-style-common)

  ;; guessed from linux kernel code init/main.c and adjust for mcs code style
  (defconst y:c-style-inspur
    '((c-tab-always-indent . nil) ; manualy added
      (c-basic-offset . 4)     ; Guessed value
      (c-offsets-alist
       (block-close . 0)       ; Guessed value
       (brace-list-close . 0)  ; Guessed value
       (brace-list-entry . 0)  ; Guessed value
       (brace-list-intro . +)  ; Guessed value
       (class-close . 0)       ; Guessed value
       (defun-block-intro . +) ; Guessed value
       (defun-close . -)       ; Guessed value
       (defun-open . -)        ; Guessed value
       (else-clause . 0)       ; Guessed value
       (inclass . +)           ; Guessed value
       (statement . 0)         ; Guessed value
       (statement-block-intro . +) ; Guessed value
       (statement-cont . +)    ; Guessed value
       (substatement . +)      ; Guessed value
       (topmost-intro . 0)     ; Guessed value
       (access-label . -)
       (annotation-top-cont . 0)
       (annotation-var-cont . +)
       (arglist-close . c-lineup-close-paren)
       (arglist-cont c-lineup-gcc-asm-reg 0)
       (arglist-cont-nonempty . c-lineup-arglist)
       (arglist-intro . +)
       (block-open . 0)
       (brace-entry-open . 0)
       (brace-list-open . 0)
       (c . c-lineup-C-comments)
       (case-label . 0)
       (catch-clause . 0)
       (class-open . 0)
       (comment-intro . c-lineup-comment)
       (composition-close . 0)
       (composition-open . 0)
       (cpp-define-intro c-lineup-cpp-define +)
       (cpp-macro . -1000)
       (cpp-macro-cont . +)
       (do-while-closure . 0)
       (extern-lang-close . 0)
       (extern-lang-open . 0)
       (friend . 0)
       (func-decl-cont . +)
       (incomposition . +)
       (inexpr-class . +)
       (inexpr-statement . +)
       (inextern-lang . +)
       (inher-cont . c-lineup-multi-inher)
       (inher-intro . +)
       (inlambda . c-lineup-inexpr-block)
       (inline-close . 0)
       (inline-open . +)
       (inmodule . +)
       (innamespace . +)
       (knr-argdecl . 0)
       (knr-argdecl-intro . 0)
       (label . 0)
       (lambda-intro-cont . +)
       (member-init-cont . c-lineup-multi-inher)
       (member-init-intro . +)
       (module-close . 0)
       (module-open . 0)
       (namespace-close . 0)
       (namespace-open . 0)
       (objc-method-args-cont . c-lineup-ObjC-method-args)
       (objc-method-call-cont c-lineup-ObjC-method-call-colons c-lineup-ObjC-method-call +)
       (objc-method-intro .
			  [0])
       (statement-case-intro . +)
       (statement-case-open . 0)
       (stream-op . c-lineup-streamop)
       (string . -1000)
       (substatement-label . 0)
       (substatement-open . 0)
       (template-args-cont c-lineup-template-args +)
       (topmost-intro-cont . c-lineup-topmost-intro-cont)))
    "y:c-mcs")
  (c-add-style "y:c-mcs" y:c-style-inspur)

  (defun y:c-style-hook()
    "Config c style depends on file pathname"
    (if (and (buffer-file-name)
	     (string-match "/mcs/" (buffer-file-name)))
	(progn
	  (c-set-style "y:c-mcs")
	  (setq indent-tabs-mode nil))
      (progn
	(c-set-style  "y:c-common")
	(setq indent-tabs-mode t))
      ))
  (add-hook 'c-mode-hook 'y:c-style-hook)
#+END_SRC
** Python
** Project
#+BEGIN_SRC emacs-lisp
  (setq project-linux-build-directory-default "~/gnu/linux-4.12")
  (setq project-linux-architecture-default "x86")
#+END_SRC
* Misc Packages
** company
- Homepage: [[https://company-mode.github.io/][Company Mode in GitHub IO]]
- Ref [[http://blog.binchen.org/posts/emacs-auto-completion-for-non-programmers.html][completion for non-programmers]]
#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish company-mode
    :init
    (add-hook 'after-init-hook 'global-company-mode)
    :config
    (progn
      ;; Use Company for completion
      (bind-key [remap completion-at-point] #'company-complete)
      (setq company-tooltip-align-annotations t
	    ;; Easy navigation to candidates with M-<n>
	    company-show-numbers t)
      (setq company-dabbrev-downcase nil)
      (setq company-minimum-prefix-length 3)
      (setq company-idle-delay 5)
      (setq company-ispell-available t)

      (defun text-mode-hook-setup ()
	(make-local-variable 'company-backends)
	(add-to-list 'company-backends 'company-ispell)
	(setq company-ispell-dictionary
	      (expand-file-name "~/.emacs.d/misc/english-words.txt")))
      (add-hook 'text-mode-hook 'text-mode-hook-setup)
      (defun toggle-company-ispell ()
	(interactive)
	(cond
	 ((memq 'company-ispell company-backends)
	  (setq company-backends (delete 'company-ispell company-backends))
	  (message "company-ispell disabled"))
	 (t
	  (add-to-list 'company-backends 'company-ispell)
	  (message "company-ispell enabled!")))))
    ;;:bind
    ;;("M-;" . company-complete-common)
    )
#+END_SRC

** helm
- GitHub IO: [[https://emacs-helm.github.io/helm/]]
- WIKI: [[https://github.com/emacs-helm/helm/wiki]]
- Bug: need to set local variable current-input-method for [[https://github.com/emacs-helm/helm/issues/797][issue 797]]
#+BEGIN_SRC emacs-lisp
    (use-package helm-config
      :ensure helm
      :config
      ;; always use english input in helm minibuffer
      ;; use C-\ (toggle-input-method) to toggle to other(e.g. pyim)
      (helm-set-local-variable 'current-input-method nil)
      :bind
      ;;("C-x C-f" . helm-find-files)
      ("M-x" . helm-M-x)
      ("C-x b" . helm-mini))

    ;;(use-package helm-core)
    ;;(add-to-list 'load-path "~/.emacs.d/elpa/helm-core-20170622.1355")
#+END_SRC

** hungry delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :diminish hungry-delete-mode
    :init
    (global-hungry-delete-mode 1))
#+END_SRC

** swiper
- Manual: [[http://oremacs.com/swiper/][Swiper Manual]]
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :diminish ivy-mode
    :init
    (ivy-mode 1)
    :config
    (progn
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "%d/%d -> ")
      ;;(ivy--regex-ignore-order)
      )
    :bind
    (("C-s" . swiper)
     ("C-c C-r" . ivy-resume)))

  ;; 20170518 version needs to require the package separately
  (use-package counsel
    :bind
    (;; I use helm-M-x replaced
     ;; ("M-x"     . counsel-M-x)
     ("C-x C-f" . counsel-find-file)
     ("C-h f"   . counsel-describe-function)
     ("C-h v"   . counsel-describe-variable)
     ("C-c g f" . counsel-git)
     ("C-c g g" . counsel-git-grep)
     ("C-c g l" . counsel-git-log)
     ("C-c k"   . counsel-ag)))
#+END_SRC

** google search
- google this package: [[https://github.com/Malabarba/emacs-google-this][Emacs Google This]]
#+BEGIN_SRC emacs-lisp
  (use-package google-this
    :diminish google-this-mode
    :config
    (google-this-mode 1)
    :bind-keymap ("C-c s" . google-this-mode-submap))
#+END_SRC

** whitespace
#+BEGIN_SRC emacs-lisp
  (use-package whitespace
    :init
    (dolist (hook '(prog-mode-hook text-mode-hook))
      (add-hook hook #'whitespace-mode))
    (add-hook 'before-save-hook #'whitespace-cleanup)
    :config
    (setq whitespace-line-column 80) ;; limit line length
    (setq whitespace-style '(face empty lines-tail tabs trailing
				  indentation::tab)))
#+END_SRC

* Dictionary
** youdao
- Homepage: [[https://github.com/xuchunyang/youdao-dictionary.el][GitHub Youdao]]
#+BEGIN_SRC emacs-lisp
  (use-package youdao-dictionary
    :init
    (setq url-automatic-caching t)
    :bind
    (("C-c y t" . youdao-dictionary-search-at-point)
     ("C-c y s" . youdao-dictionary-play-voice-at-point)))
#+END_SRC

** TODO sdcv
* MultiMedia
** Emms
- Homepage: [[https://www.gnu.org/software/emms/][gnu emms]]
- Download players under windows: [[https://www.mpg123.de/download/win64][mpg123 win64]], [[https://sourceforge.net/projects/mplayerwin/][mplayer]]
#+BEGIN_SRC emacs-lisp
  (add-to-list 'exec-path "c:/mplayer")
  ;;(add-to-list 'exec-path "c:/Program Files (x86)/VideoLAN/VLC/")

  (defun y:emms-play-default()
      (interactive)
      (emms-play-directory "f:/CloudMusic")
      (emms-start))

  (use-package emms
    :ensure emms
    :config
    (progn
      (require 'emms-setup)
      (setq emms-playlist-buffer-name "*Emms*")
      (setq emms-source-file-default-directory "~/music/")
      (emms-all) ;; load all stable features
      ;; use default config - (setq emms-player-list '(emms-player-mplayer))
      (emms-default-players)

      (require 'emms-player-mplayer)
      (define-emms-simple-player mplayer '(file url)
	(regexp-opt '(".ogg" ".mp3" ".wav" ".mpg" ".mpeg" ".wmv" ".wma"
		      ".mov" ".avi" ".divx" ".ogm" ".asf" ".mkv" ".rm" ".rmvb"
		      ".mp4" ".flac" ".vob" ".m4a" ".flv" ".ogv" ".pls"
		      "http://" "mms://"))
	"mplayer" "-slave" "-quiet" "-really-quiet" "-fullscreen")

      ;; FIXME: configure VLC for Video
      ;; (define-emms-simple-player vlc '(file url)
      ;; (regexp-opt '(".wmv" ".mov" ".avi" ".rm" ".rmvb" ".mp4"))
      ;; "vlc" "--fullscreen" "--intf=rc" "-I win")
      (require 'emms-playing-time))
    :bind
    (("C-c m x" . y:emms-play-default)
     ("C-c m s" . emms-start)
     ("C-c m q" . emms-stop)
     ("C-c m p" . emms-pause)
     ("C-c m P" . emms-previous)
     ("C-c m n" . emms-next)
     ;; FIXME: howto change volume under windows? no amixer.
     ("C-c m +" . emms-volume-raise)
     ("C-c m =" . emms-volume-raise)
     ("C-c m -" . emms-volume-lower)
     ("C-c m _" . emms-volume-lower)
     ("C-c m f" . emms-play-file)
     ("C-c m d" . emms-play-directory))
    )
#+END_SRC
* Browser
- emacs-w3m: [[https://github.com/ecbrown/emacs-w3m][GitHub emacs-w3m]]
#+BEGIN_SRC emacs-lisp
  (use-package w3m
    :pin melpa
    :config
    (progn
      (setq w3m-coding-system 'utf-8
	    w3m-file-coding-system 'utf-8
	    w3m-file-name-coding-system 'utf-8
	    w3m-input-coding-system 'utf-8
	    w3m-output-coding-system 'utf-8
	    ;; emacs-w3m will test the ImageMagick support for png32
	    ;; and create files named "png32:-" everywhere
	    w3m-imagick-convert-program nil
	    w3m-terminal-coding-system 'utf-8
	    w3m-use-cookies t
	    w3m-cookie-accept-bad-cookies t
	    w3m-home-page "http://www.google.com.hk/en"
	    w3m-command-arguments       '("-F" "-cookie")
	    w3m-mailto-url-function     'compose-mail
	    browse-url-browser-function 'w3m
	    ;; use shr to view html mail, but if libxml NOT available
	    ;; use w3m isntead. That's macs 24.3+ default logic
	    mm-text-html-renderer 'w3m ; I prefer w3m
	    w3m-use-toolbar t
	    ;; show images in the browser
	    w3m-default-display-inline-images t
	    ;; w3m-use-tab     nil
	    w3m-confirm-leaving-secure-page nil
	    w3m-search-default-engine "g"
	    w3m-view-this-url-new-session-in-background t
	    w3m-key-binding 'info)))

  (defun y:view-mode-func()
    (message "Set to view mode func")
    (define-key view-mode-map "n" 'next-line)
    (define-key view-mode-map "p" 'previous-line)

    (define-key view-mode-map "." 'ggtags-find-tag-dwim)
    (define-key view-mode-map "," 'pop-tag-mark)
  )

  (eval-after-load 'view-mode-hook 'y:view-mode-func)

  ;;(use-package emacs-w3m)
#+END_SRC
* Reference
- use-package :: [[https://github.com/jwiegley/use-package][HomePage]]\\
